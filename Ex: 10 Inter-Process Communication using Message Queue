#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>

struct msg_buffer {
    long msg_type;
    char msg_text[100];
};

int main() {
    key_t key = 1234;
    int msgid = msgget(key, 0666 | IPC_CREAT);
    if(msgid == -1) { perror("msgget"); exit(1); }

    struct msg_buffer message;
    pid_t pid = fork();

    if(pid < 0) {
        perror("fork");
        exit(1);
    } 
    else if(pid == 0) { // Child: reads message
        sleep(1); // wait for parent to send
        msgrcv(msgid, &message, sizeof(message.msg_text), 1, 0);
        printf("Child received: %s\n", message.msg_text);
    } 
    else { // Parent: sends message
        message.msg_type = 1;
        strcpy(message.msg_text, "Hello from parent via message queue!");
        msgsnd(msgid, &message, sizeof(message.msg_text), 0);
        wait(NULL);
        msgctl(msgid, IPC_RMID, NULL); // remove queue
    }

    return 0;
}
