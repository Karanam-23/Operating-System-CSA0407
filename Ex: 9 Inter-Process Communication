#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>
#include <unistd.h>

int main() {
    key_t key = 1234; // shared memory key
    int shmid = shmget(key, 1024, 0666|IPC_CREAT);
    if(shmid == -1) { perror("shmget"); exit(1); }

    char *str = (char*) shmat(shmid, NULL, 0); // attach
    if(str == (char*)-1) { perror("shmat"); exit(1); }

    pid_t pid = fork();

    if(pid < 0) {
        perror("fork");
        exit(1);
    } 
    else if(pid == 0) { // Child process: reads from shared memory
        sleep(1); // wait for parent to write
        printf("Child read from shared memory: %s\n", str);
        shmdt(str); // detach
    } 
    else { // Parent process: writes to shared memory
        printf("Parent writing to shared memory...\n");
        strcpy(str, "Hello from parent!");
        wait(NULL); // wait for child
        shmdt(str); // detach
        shmctl(shmid, IPC_RMID, NULL); // remove shared memory
    }

    return 0;
}
